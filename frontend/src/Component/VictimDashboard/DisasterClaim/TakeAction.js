import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import axios from '../../../api/axios';

export default function TakeAction() {
  const { id } = useParams();
  const navigate = useNavigate();
  
  // State management
  const [claim, setClaim] = useState(null);
  const [actionForm, setActionForm] = useState({
    actionType: '',
    priority: 'medium',
    description: '',
    financialRecommendation: '',
    compensationAmount: '',
    notes: ''
  });
  const [loading, setLoading] = useState(true);

  // Load claim data
  useEffect(() => {
    const loadClaim = () => {
      try {
        // Try to get from localStorage first
        const storedClaim = localStorage.getItem('selectedClaim');
        if (storedClaim) {
          const claimData = JSON.parse(storedClaim);
          setClaim(claimData);
          
          // Pre-fill form with claim data
          setActionForm(prev => ({
            ...prev,
            compensationAmount: claimData.estimatedLoss || ''
          }));
        }
        setLoading(false);
      } catch (error) {
        console.error('Error loading claim:', error);
        setLoading(false);
      }
    };

    loadClaim();
  }, [id]);

  // Generate PDF report
  const generateReport = () => {
    if (!claim) return;

    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.setFont(undefined, 'bold');
    doc.text('DAMAGE CLAIM ACTION REPORT', 20, 20);
    
    // Report details
    doc.setFontSize(12);
    doc.setFont(undefined, 'normal');
    doc.text(`Report Date: ${new Date().toLocaleDateString()}`, 20, 35);
    doc.text(`Claim ID: ${claim._id}`, 20, 45);
    
    // Claimant information
    doc.setFontSize(14);
    doc.setFont(undefined, 'bold');
    doc.text('CLAIMANT INFORMATION', 20, 65);
    
    const claimantData = [
      ['Name', claim.name || 'N/A'],
      ['NIC', claim.nic || 'N/A'],
      ['Email', claim.email || 'N/A'],
      ['Phone', claim.phone || 'N/A'],
      ['Address', claim.address || 'N/A']
    ];

    autoTable(doc, {
      startY: 70,
      head: [['Field', 'Value']],
      body: claimantData,
      theme: 'grid',
      headStyles: { fillColor: [41, 128, 185] }
    });

    // Damage information
    doc.setFontSize(14);
    doc.setFont(undefined, 'bold');
    doc.text('DAMAGE INFORMATION', 20, doc.lastAutoTable.finalY + 20);
    
    const damageData = [
      ['Damage Type', claim.damageType || 'N/A'],
      ['Estimated Loss', claim.estimatedLoss || 'N/A'],
      ['Occurred At', claim.occurredAt ? new Date(claim.occurredAt).toLocaleDateString() : 'N/A'],
      ['Location', claim.currentLocation || 'N/A'],
      ['Description', claim.description || 'N/A']
    ];

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 25,
      head: [['Field', 'Value']],
      body: damageData,
      theme: 'grid',
      headStyles: { fillColor: [41, 128, 185] }
    });

    // Action taken
    doc.setFontSize(14);
    doc.setFont(undefined, 'bold');
    doc.text('ACTION TAKEN', 20, doc.lastAutoTable.finalY + 20);
    
    const actionData = [
      ['Action Type', actionForm.actionType || 'N/A'],
      ['Priority', actionForm.priority || 'N/A'],
      ['Compensation Amount', actionForm.compensationAmount || 'N/A'],
      ['Financial Recommendation', actionForm.financialRecommendation || 'N/A'],
      ['Description', actionForm.description || 'N/A'],
      ['Internal Notes', actionForm.notes || 'N/A']
    ];

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 25,
      head: [['Field', 'Value']],
      body: actionData,
      theme: 'grid',
      headStyles: { fillColor: [231, 76, 60] }
    });

    // Footer
    doc.setFontSize(10);
    doc.text('Generated by SafeZone Disaster Management System', 20, doc.internal.pageSize.height - 20);
    doc.text(`Page 1 of 1`, doc.internal.pageSize.width - 40, doc.internal.pageSize.height - 20);

    // Save the PDF
    doc.save(`claim-action-report-${claim._id}.pdf`);
  };

  // Send email to victim
  const sendEmailToVictim = () => {
    if (!claim) return;

    const subject = `Update on Your Damage Claim - Reference: ${claim._id}`;
    const message = `Dear ${claim.name},

We are writing to update you on the status of your damage claim submitted on ${new Date(claim.reportedAt || claim.createdAt).toLocaleDateString()}.

CLAIM DETAILS:
- Claim ID: ${claim._id}
- Damage Type: ${claim.damageType}
- Estimated Loss: ${claim.estimatedLoss}
- Location: ${claim.currentLocation}

ACTION TAKEN:
- Status: ${actionForm.actionType}
- Priority Level: ${actionForm.priority}
${actionForm.compensationAmount ? `- Approved Compensation: ${actionForm.compensationAmount}` : ''}

${actionForm.description}

NEXT STEPS:
${actionForm.financialRecommendation}

If you have any questions or need clarification about this decision, please don't hesitate to contact our support team.

Thank you for your patience during this process.

Best regards,
SafeZone Disaster Management Team
Email: support@safezone.lk
Phone: +94 11 234 5678`;

    const emailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${encodeURIComponent(claim.email)}&su=${encodeURIComponent(subject)}&body=${encodeURIComponent(message)}`;
    window.open(emailUrl, '_blank');
  };

  // Send to financial unit
  const sendToFinancialUnit = () => {
    if (!claim) return;

    const subject = `Financial Review Required - Damage Claim ${claim._id}`;
    const message = `Dear Financial Unit,

A damage claim requires your review and financial processing.

CLAIM INFORMATION:
- Claim ID: ${claim._id}
- Claimant: ${claim.name}
- NIC: ${claim.nic}
- Contact: ${claim.email} | ${claim.phone}

DAMAGE DETAILS:
- Type: ${claim.damageType}
- Estimated Loss: ${claim.estimatedLoss}
- Date Occurred: ${claim.occurredAt ? new Date(claim.occurredAt).toLocaleDateString() : 'N/A'}
- Location: ${claim.currentLocation}

RECOMMENDED ACTION:
- Action Type: ${actionForm.actionType}
- Priority: ${actionForm.priority}
- Recommended Compensation: ${actionForm.compensationAmount}
- Financial Recommendation: ${actionForm.financialRecommendation}

ASSESSMENT NOTES:
${actionForm.description}

INTERNAL NOTES:
${actionForm.notes}

Please review this claim and process the financial aspects accordingly. A detailed PDF report has been generated and should be attached to this email.

For any clarifications, please contact the disaster management team.

Best regards,
Disaster Management Team
SafeZone DMS`;

    const financialEmail = 'finance@safezone.lk'; // You can make this configurable
    const emailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${encodeURIComponent(financialEmail)}&su=${encodeURIComponent(subject)}&body=${encodeURIComponent(message)}`;
    window.open(emailUrl, '_blank');
  };

  // Complete action
  const completeAction = async () => {
    if (!actionForm.actionType || !actionForm.description) {
      alert('Please fill in required fields (Action Type and Description)');
      return;
    }

    setLoading(true);

    try {
      // Map action types to database status values
      const getActionStatus = (actionType) => {
        const statusMap = {
          'Approved': 'approved',
          'Rejected': 'rejected', 
          'Under Investigation': 'under_review',
          'Requires Documentation': 'under_review',
          'Assessment Scheduled': 'under_review',
          'Compensation Approved': 'approved'
        };
        return statusMap[actionType] || 'under_review';
      };

      // Determine financial status based on action type
      const getFinancialStatus = (actionType) => {
        if (actionType === 'Compensation Approved' || actionType === 'Approved') {
          return 'sent_to_financial';
        }
        if (actionType === 'Rejected') {
          return 'not_sent';
        }
        return 'not_sent';
      };

      // Update action status in database
      await axios.patch(`/damage/${claim._id}/action`, {
        actionStatus: getActionStatus(actionForm.actionType),
        actionTakenBy: 'Admin', // You can get this from user context
        actionNotes: actionForm.description,
        actionType: actionForm.actionType,
        financialStatus: getFinancialStatus(actionForm.actionType),
        financialAmount: actionForm.compensationAmount ? Number(actionForm.compensationAmount) : undefined,
        financialNotes: actionForm.financialRecommendation
      });

      // Store claim status and action details in localStorage (for backward compatibility)
      const claimStatuses = JSON.parse(localStorage.getItem('claimStatuses') || '{}');
      claimStatuses[claim._id] = {
        status: actionForm.actionType, // Store the display name
        actionDate: new Date().toISOString(),
        priority: actionForm.priority,
        compensationAmount: actionForm.compensationAmount,
        description: actionForm.description,
        financialRecommendation: actionForm.financialRecommendation,
        notes: actionForm.notes
      };
      localStorage.setItem('claimStatuses', JSON.stringify(claimStatuses));

      // Also mark as reviewed (for backward compatibility)
      const reviewedIds = JSON.parse(localStorage.getItem('reviewedClaimIds') || '[]');
      if (!reviewedIds.includes(claim._id)) {
        reviewedIds.push(claim._id);
        localStorage.setItem('reviewedClaimIds', JSON.stringify(reviewedIds));
      }

      // Automatically send email to victim
      try {
        sendEmailToVictim();
      } catch (error) {
        console.error('Error sending email to victim:', error);
        // Continue with the process even if email fails
      }

      alert(`Action completed successfully! Claim status has been updated to: ${actionForm.actionType}. An email notification has been sent to the victim. The status will now sync across all devices.`);
      navigate('/victim/claim/records');

    } catch (error) {
      console.error('Error updating claim status:', error);
      alert('Error updating claim status in database. Changes saved locally only.');
      
      // Fallback to localStorage only
      const claimStatuses = JSON.parse(localStorage.getItem('claimStatuses') || '{}');
      claimStatuses[claim._id] = {
        status: actionForm.actionType,
        actionDate: new Date().toISOString(),
        priority: actionForm.priority,
        compensationAmount: actionForm.compensationAmount,
        description: actionForm.description,
        financialRecommendation: actionForm.financialRecommendation,
        notes: actionForm.notes
      };
      localStorage.setItem('claimStatuses', JSON.stringify(claimStatuses));
      
      navigate('/victim/claim/records');
    } finally {
      setLoading(false);
    }
  };

  // Inline styles
  const styles = {
    page: {
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
      padding: '24px',
      fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
    },
    header: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      background: 'white',
      padding: '24px 32px',
      borderRadius: '16px',
      boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
      marginBottom: '32px',
      border: '1px solid #e2e8f0'
    },
    headerTitle: {
      margin: 0,
      color: '#1e293b',
      fontSize: '2rem',
      fontWeight: 700,
      background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
      WebkitBackgroundClip: 'text',
      WebkitTextFillColor: 'transparent',
      backgroundClip: 'text'
    },
    btn: {
      padding: '12px 24px',
      border: 'none',
      borderRadius: '12px',
      cursor: 'pointer',
      fontWeight: 600,
      fontSize: '14px',
      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
      textDecoration: 'none',
      display: 'inline-flex',
      alignItems: 'center',
      gap: '8px',
      position: 'relative',
      overflow: 'hidden'
    },
    btnBack: {
      background: 'linear-gradient(135deg, #64748b, #475569)',
      color: 'white',
      boxShadow: '0 4px 15px rgba(100,116,139,0.3)'
    },
    content: {
      display: 'grid',
      gridTemplateColumns: '1fr',
      gap: '24px',
      maxWidth: '1200px',
      margin: '0 auto'
    },
    claimDetailsSection: {
      background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
      padding: '24px',
      borderRadius: '20px',
      boxShadow: '0 8px 32px rgba(59, 130, 246, 0.1)',
      border: '1px solid #e2e8f0',
      marginBottom: '24px',
      position: 'relative',
      overflow: 'hidden'
    },
    claimDetailsBorder: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: '4px',
      background: 'linear-gradient(90deg, #3b82f6, #8b5cf6, #ec4899)'
    },
    claimDetailsTitle: {
      color: '#1e293b',
      marginBottom: '20px',
      fontSize: '1.4rem',
      fontWeight: 700,
      textAlign: 'center',
      position: 'relative',
      paddingBottom: 0
    },
    claimInfo: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
      gap: '16px',
      marginTop: '8px'
    },
    infoItem: {
      background: 'linear-gradient(135deg, #ffffff, #f8fafc)',
      padding: '20px',
      borderRadius: '16px',
      boxShadow: '0 4px 20px rgba(0, 0, 0, 0.06)',
      border: '1px solid #f1f5f9',
      position: 'relative',
      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
      overflow: 'hidden'
    },
    infoItemBorder: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '4px',
      height: '100%',
      background: 'linear-gradient(180deg, #3b82f6, #1d4ed8)',
      transition: 'width 0.3s ease'
    },
    infoLabel: {
      display: 'flex',
      alignItems: 'center',
      gap: '8px',
      fontWeight: 700,
      color: '#64748b',
      fontSize: '12px',
      textTransform: 'uppercase',
      letterSpacing: '1px',
      marginBottom: '8px'
    },
    infoValue: {
      display: 'block',
      color: '#1e293b',
      fontWeight: 600,
      fontSize: '16px',
      lineHeight: 1.4,
      wordBreak: 'break-word'
    },
    formActionsContainer: {
      display: 'grid',
      gridTemplateColumns: '2fr 1fr',
      gap: '32px',
      marginTop: '24px'
    },
    formSection: {
      background: 'white',
      padding: '24px 28px',
      borderRadius: '16px',
      boxShadow: '0 6px 25px rgba(0,0,0,0.06)',
      border: '1px solid #e2e8f0',
      height: 'fit-content'
    },
    formTitle: {
      color: '#1e293b',
      marginBottom: '20px',
      fontSize: '1.3rem',
      fontWeight: 600,
      position: 'relative',
      paddingBottom: '10px'
    },
    formTitleBorder: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      width: '50px',
      height: '3px',
      background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
      borderRadius: '2px'
    },
    form: {
      display: 'flex',
      flexDirection: 'column',
      gap: '20px'
    },
    formGroup: {
      display: 'flex',
      flexDirection: 'column',
      position: 'relative'
    },
    formLabel: {
      fontWeight: 600,
      color: '#374151',
      marginBottom: '6px',
      fontSize: '13px',
      textTransform: 'uppercase',
      letterSpacing: '0.3px',
      display: 'flex',
      alignItems: 'center',
      gap: '6px'
    },
    formLabelBar: {
      width: '3px',
      height: '14px',
      background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
      borderRadius: '2px'
    },
    formInput: {
      padding: '12px 16px',
      border: '2px solid #e5e7eb',
      borderRadius: '10px',
      fontSize: '14px',
      fontFamily: 'inherit',
      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
      background: '#fafbfc',
      color: '#1f2937'
    },
    actionsSection: {
      background: 'white',
      padding: '28px',
      borderRadius: '16px',
      boxShadow: '0 6px 25px rgba(0,0,0,0.06)',
      border: '1px solid #e2e8f0',
      height: 'fit-content',
      position: 'sticky',
      top: '24px'
    },
    actionsTitle: {
      color: '#1e293b',
      marginBottom: '20px',
      fontSize: '1.3rem',
      fontWeight: 600,
      position: 'relative',
      paddingBottom: '10px',
      textAlign: 'center'
    },
    actionsTitleBorder: {
      position: 'absolute',
      bottom: 0,
      left: '50%',
      transform: 'translateX(-50%)',
      width: '50px',
      height: '3px',
      background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
      borderRadius: '2px'
    },
    actionButtons: {
      display: 'grid',
      gridTemplateColumns: '1fr',
      gap: '16px'
    },
    btnReport: {
      background: 'linear-gradient(135deg, #06b6d4, #0891b2)',
      color: 'white',
      boxShadow: '0 4px 15px rgba(6, 182, 212, 0.3)',
      border: '2px solid transparent',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      gap: '12px',
      padding: '16px 24px',
      fontSize: '15px',
      fontWeight: 600,
      textAlign: 'center',
      minHeight: '56px'
    },
    btnFinancial: {
      background: 'linear-gradient(135deg, #f59e0b, #d97706)',
      color: 'white',
      boxShadow: '0 4px 15px rgba(245, 158, 11, 0.3)',
      border: '2px solid transparent',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      gap: '12px',
      padding: '16px 24px',
      fontSize: '15px',
      fontWeight: 600,
      textAlign: 'center',
      minHeight: '56px'
    },
    btnSubmit: {
      background: 'linear-gradient(135deg, #3b82f6, #1d4ed8, #1e40af)',
      color: 'white',
      width: '100%',
      marginTop: '12px',
      fontSize: '16px',
      fontWeight: 700,
      padding: '16px 24px',
      textTransform: 'uppercase',
      letterSpacing: '1px',
      boxShadow: '0 8px 20px rgba(59, 130, 246, 0.4), inset 0 2px 4px rgba(255, 255, 255, 0.2)',
      border: 'none',
      borderRadius: '30px',
      position: 'relative',
      overflow: 'hidden',
      fontFamily: 'serif',
      textShadow: '1px 1px 2px rgba(0,0,0,0.3)',
      cursor: 'pointer',
      transition: 'all 0.4s ease'
    },
    loading: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      minHeight: '400px',
      background: 'white',
      borderRadius: '20px',
      boxShadow: '0 8px 30px rgba(0,0,0,0.08)',
      textAlign: 'center',
      border: '1px solid #e2e8f0',
      color: '#64748b',
      fontSize: '1.2rem',
      fontWeight: 500
    },
    error: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      minHeight: '400px',
      background: 'white',
      borderRadius: '20px',
      boxShadow: '0 8px 30px rgba(0,0,0,0.08)',
      textAlign: 'center',
      border: '1px solid #e2e8f0'
    },
    errorTitle: {
      color: '#dc2626',
      marginBottom: '16px',
      fontSize: '1.5rem',
      fontWeight: 700
    },
    errorText: {
      color: '#64748b',
      marginBottom: '24px',
      fontSize: '1.1rem'
    },
    errorButton: {
      background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
      color: 'white',
      padding: '12px 24px',
      border: 'none',
      borderRadius: '12px',
      cursor: 'pointer',
      fontWeight: 600,
      fontSize: '14px',
      transition: 'all 0.3s ease'
    }
  };

  if (loading) {
    return (
      <div style={styles.page}>
        <div style={styles.loading}>Loading claim data...</div>
      </div>
    );
  }

  if (!claim) {
    return (
      <div style={styles.page}>
        <div style={styles.error}>
          <h2 style={styles.errorTitle}>Claim Not Found</h2>
          <p style={styles.errorText}>Unable to load claim data. Please try again.</p>
          <button style={styles.errorButton} onClick={() => navigate('/victim/claim/records')}>
            Back to Claims
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.page}>
      <header style={styles.header}>
        <h1 style={styles.headerTitle}>Take Action on Claim</h1>
        <button 
          style={{...styles.btn, ...styles.btnBack}}
          onClick={() => navigate('/victim/claim/records')}
        >
          ← Back to Claims
        </button>
      </header>

      <div style={styles.content}>
        {/* Claim Details Section */}
        <section style={styles.claimDetailsSection}>
          <div style={styles.claimDetailsBorder}></div>
          <h2 style={styles.claimDetailsTitle}>Claim Details</h2>
          <div style={styles.claimInfo}>
            <div style={styles.infoItem}>
              <div style={styles.infoItemBorder}></div>
              <div style={styles.infoLabel}>
                <div style={{width: '8px', height: '8px', background: 'linear-gradient(135deg, #10b981, #059669)', borderRadius: '50%', flexShrink: 0}}></div>
                Claimant
              </div>
              <span style={styles.infoValue}>{claim.name}</span>
            </div>
            <div style={styles.infoItem}>
              <div style={styles.infoItemBorder}></div>
              <div style={styles.infoLabel}>
                <div style={{width: '8px', height: '8px', background: 'linear-gradient(135deg, #f59e0b, #d97706)', borderRadius: '50%', flexShrink: 0}}></div>
                Email
              </div>
              <span style={styles.infoValue}>{claim.email}</span>
            </div>
            <div style={styles.infoItem}>
              <div style={styles.infoItemBorder}></div>
              <div style={styles.infoLabel}>
                <div style={{width: '8px', height: '8px', background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)', borderRadius: '50%', flexShrink: 0}}></div>
                Phone
              </div>
              <span style={styles.infoValue}>{claim.phone}</span>
            </div>
            <div style={styles.infoItem}>
              <div style={styles.infoItemBorder}></div>
              <div style={styles.infoLabel}>
                <div style={{width: '8px', height: '8px', background: 'linear-gradient(135deg, #ef4444, #dc2626)', borderRadius: '50%', flexShrink: 0}}></div>
                Damage Type
              </div>
              <span style={styles.infoValue}>{claim.damageType}</span>
            </div>
            <div style={styles.infoItem}>
              <div style={styles.infoItemBorder}></div>
              <div style={styles.infoLabel}>
                <div style={{width: '8px', height: '8px', background: 'linear-gradient(135deg, #06b6d4, #0891b2)', borderRadius: '50%', flexShrink: 0}}></div>
                Estimated Loss
              </div>
              <span style={styles.infoValue}>{claim.estimatedLoss}</span>
            </div>
            <div style={styles.infoItem}>
              <div style={styles.infoItemBorder}></div>
              <div style={styles.infoLabel}>
                <div style={{width: '8px', height: '8px', background: 'linear-gradient(135deg, #84cc16, #65a30d)', borderRadius: '50%', flexShrink: 0}}></div>
                Submitted
              </div>
              <span style={styles.infoValue}>
                {new Date(claim.reportedAt || claim.createdAt).toLocaleDateString()}
              </span>
            </div>
          </div>
        </section>

        {/* Form and Actions Container */}
        <div style={styles.formActionsContainer}>
          {/* Action Form Section */}
          <section style={styles.formSection}>
            <div style={{position: 'relative'}}>
              <h2 style={styles.formTitle}>Action Details</h2>
              <div style={styles.formTitleBorder}></div>
            </div>
            <form style={styles.form} onSubmit={(e) => { e.preventDefault(); completeAction(); }}>
              <div style={styles.formGroup}>
                <label style={styles.formLabel}>
                  <div style={styles.formLabelBar}></div>
                  Action Type *
                </label>
                <select
                  style={styles.formInput}
                  value={actionForm.actionType}
                  onChange={(e) => setActionForm({...actionForm, actionType: e.target.value})}
                  required
                >
                  <option value="">Select action type...</option>
                  <option value="Approved">Approve Claim</option>
                  <option value="Rejected">Reject Claim</option>
                  <option value="Under Investigation">Under Investigation</option>
                  <option value="Requires Documentation">Requires Additional Documentation</option>
                  <option value="Assessment Scheduled">Assessment Scheduled</option>
                  <option value="Compensation Approved">Compensation Approved</option>
                </select>
              </div>

              <div style={styles.formGroup}>
                <label style={styles.formLabel}>
                  <div style={styles.formLabelBar}></div>
                  Priority Level
                </label>
                <select
                  style={styles.formInput}
                  value={actionForm.priority}
                  onChange={(e) => setActionForm({...actionForm, priority: e.target.value})}
                >
                  <option value="low">Low Priority</option>
                  <option value="medium">Medium Priority</option>
                  <option value="high">High Priority</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>

              <div style={styles.formGroup}>
                <label style={styles.formLabel}>
                  <div style={styles.formLabelBar}></div>
                  Compensation Amount
                </label>
                <input
                  style={styles.formInput}
                  type="text"
                  value={actionForm.compensationAmount}
                  onChange={(e) => setActionForm({...actionForm, compensationAmount: e.target.value})}
                  placeholder="Enter approved compensation amount"
                />
              </div>

              <div style={styles.formGroup}>
                <label style={styles.formLabel}>
                  <div style={styles.formLabelBar}></div>
                  Action Description *
                </label>
                <textarea
                  style={{...styles.formInput, resize: 'vertical', minHeight: '80px', fontFamily: 'inherit', lineHeight: 1.5}}
                  value={actionForm.description}
                  onChange={(e) => setActionForm({...actionForm, description: e.target.value})}
                  placeholder="Describe the action taken and rationale..."
                  rows={4}
                  required
                />
              </div>

              <div style={styles.formGroup}>
                <label style={styles.formLabel}>
                  <div style={styles.formLabelBar}></div>
                  Financial Recommendation
                </label>
                <textarea
                  style={{...styles.formInput, resize: 'vertical', minHeight: '80px', fontFamily: 'inherit', lineHeight: 1.5}}
                  value={actionForm.financialRecommendation}
                  onChange={(e) => setActionForm({...actionForm, financialRecommendation: e.target.value})}
                  placeholder="Provide recommendations for financial processing..."
                  rows={3}
                />
              </div>

              <div style={styles.formGroup}>
                <label style={styles.formLabel}>
                  <div style={styles.formLabelBar}></div>
                  Internal Notes
                </label>
                <textarea
                  style={{...styles.formInput, resize: 'vertical', minHeight: '80px', fontFamily: 'inherit', lineHeight: 1.5}}
                  value={actionForm.notes}
                  onChange={(e) => setActionForm({...actionForm, notes: e.target.value})}
                  placeholder="Add any internal notes..."
                  rows={3}
                />
              </div>

              <div style={styles.formGroup}>
                <button 
                  type="submit"
                  style={styles.btnSubmit}
                >
                  Submit Action
                </button>
              </div>
            </form>
          </section>
          
          {/* Actions Section */}
          <section style={styles.actionsSection}>
            <div style={{position: 'relative'}}>
              <h2 style={styles.actionsTitle}>Available Actions</h2>
              <div style={styles.actionsTitleBorder}></div>
            </div>
            <div style={styles.actionButtons}>
              <button 
                style={{...styles.btn, ...styles.btnReport}}
                onClick={generateReport}
              >
                📄 Generate PDF Report
              </button>
              
              <button 
                style={{...styles.btn, ...styles.btnFinancial}}
                onClick={sendToFinancialUnit}
              >
                💰 Send to Financial Unit
              </button>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}